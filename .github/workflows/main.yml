name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: pastebin
        IMAGE_TAG: ${{ github.sha }}
        SECRETKEY: ${{ secrets.SECRETKEY }}
        DJANGOSETTINGSMODULE: ${{ secrets.DJANGOSETTINGSMODULE }}
        DJANGO_WSGI_SETTINGS_MODULE: ${{ secrets.DJANGO_WSGI_SETTINGS_MODULE }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_POST: ${{ secrets.DB_POST }}
        DB_SECRET_KEY: ${{ secrets.DB_SECRET_KEY }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build \
        -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
        --build-arg SECRETKEY \
        --build-arg DJANGOSETTINGSMODULE \
        --build-arg DJANGO_WSGI_SETTINGS_MODULE \
        --build-arg DB_NAME \
        --build-arg DB_USER \
        --build-arg DB_HOST \
        --build-arg DB_POST \
        --build-arg DB_SECRET_KEY \
        -f prod.Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task_definition.json
        container-name: pastebin
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: pastebin
        cluster: pastebin-cluster
        wait-for-service-stability: true